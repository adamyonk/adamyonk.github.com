<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://adamyonk.com/</id>
  <title>adamyonk.com Syndication</title>
  <updated>2013-08-01T16:13:31Z</updated>
  <link rel="alternate" href="http://adamyonk.com/"/>
  <link rel="self" href="http://adamyonk.com/posts/feed.xml"/>
  <author>
    <name>Adam Jahnke</name>
    <uri>http://adamyonk.com</uri>
  </author>
  <entry>
    <id>tag:adamyonk.com,2013-08-01:/posts/2013/08/01/easy-masked-file-inputs.html</id>
    <title type="html">Masked file inputs</title>
    <published>2013-08-01T16:13:31Z</published>
    <updated>2013-08-01T16:13:31Z</updated>
    <link rel="alternate" href="http://adamyonk.com/posts/2013/08/01/easy-masked-file-inputs.html"/>
    <content type="html">&lt;p&gt;I put together a pretty simple solution for masking yet another native HTML
input that behaves just fine on its own. The lengths we'll go to for our
designers...&lt;/p&gt;

&lt;p&gt;I'm just kidding. You guys are great!&lt;/p&gt;

&lt;pre data-height="300" data-theme-id="0" data-slug-hash="KelCo" data-user="adamyonk" data-default-tab="result" class='codepen'&gt;See the Pen &lt;a href='http://codepen.io/adamyonk/pen/KelCo'&gt;Easy masked file inputs with JS&lt;/a&gt; by Adam Jahnke (&lt;a href='http://codepen.io/adamyonk'&gt;@adamyonk&lt;/a&gt;) on &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;&lt;/pre&gt;


&lt;script async src="http://codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <id>tag:adamyonk.com,2013-05-17:/posts/2013/05/17/css-map-pins.html</id>
    <title type="html">CSS Map Pins</title>
    <published>2013-05-17T19:57:00Z</published>
    <updated>2013-05-17T19:57:00Z</updated>
    <link rel="alternate" href="http://adamyonk.com/posts/2013/05/17/css-map-pins.html"/>
    <content type="html">&lt;p&gt;I spend a fair amount of time trying to get this shape nailed down in CSS, so
I wanted to share and save someone the time. The secret was in setting the
second set of radii on the &lt;code&gt;box-shadow&lt;/code&gt; property. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius"&gt;MDN&lt;/a&gt; has a helpful
visual to help wrap your mind around that lesser-known feature of box-shadow.&lt;/p&gt;

&lt;pre class="codepen" data-height="300" data-type="result" data-href="Edxia" data-user="adamyonk" data-safe="true"&gt;&lt;code&gt;&lt;/code&gt;&lt;a href="http://codepen.io/adamyonk/pen/Edxia"&gt;Check out this Pen!&lt;/a&gt;&lt;/pre&gt;


&lt;script async src="http://codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <id>tag:adamyonk.com,2013-05-16:/posts/2013/05/16/rails-4-strong-parameters-and-nested-forms.html</id>
    <title type="html">Rails 4, Strong Parameters, and Nested Forms</title>
    <published>2013-05-16T18:19:06Z</published>
    <updated>2013-05-16T18:19:06Z</updated>
    <link rel="alternate" href="http://adamyonk.com/posts/2013/05/16/rails-4-strong-parameters-and-nested-forms.html"/>
    <content type="html">&lt;p&gt;I recently started building a Rails 4 app and ran into some hangups when
using strong parameters with nested models and forms. It seems to be lacking
documentation for this specific scenario, so I wanted to share my findings.&lt;/p&gt;

&lt;p&gt;In a scenario where you have an album that &lt;code&gt;has_many&lt;/code&gt; songs, and you want to be
able to edit both with the same form, you need to add every nested attribute
that you plan to pass through to the &lt;code&gt;params.permit()&lt;/code&gt;. This is the setup that
ended up working for me:&lt;/p&gt;

&lt;script src="https://gist.github.com/adamyonk/5593868.js"&gt;&lt;/script&gt;


&lt;p&gt;Do you know of a better or easier way? &lt;a href="mailto:adamyonk@me.com?subject=Rails%204,%20Strong%20Parameters,%20and%20Nested%20Forms"&gt;Let me know!&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:adamyonk.com,2013-01-14:/posts/2013/01/14/using-imageoptim-with-guard-shell.html</id>
    <title type="html">Using ImageOptim with guard-shell</title>
    <published>2013-01-14T16:14:37Z</published>
    <updated>2013-01-14T16:14:37Z</updated>
    <link rel="alternate" href="http://adamyonk.com/posts/2013/01/14/using-imageoptim-with-guard-shell.html"/>
    <content type="html">&lt;p&gt;For the uninitiated, &lt;a href="http://imageoptim.com" title="ImageOptim â€” make websites and apps load faster (Mac app)"&gt;ImageOptim&lt;/a&gt; is a great Mac app that uses
several well-known image optimization tools to compress images and help keep
file sizes down and &lt;a href="https://github.com/guard/guard" title="Guard is a command line tool to easily handle events on file system modifications."&gt;Guard&lt;/a&gt; is "a command line tool to easily handle
events on file system modifications." If you've never tried Guard, I'd
encourage you to take some time and check it out. With over &lt;a href="https://rubygems.org/search?query=guard-"&gt;150
plugins&lt;/a&gt; now available, there's surely some way that you can
use it to optimize your workflow.&lt;/p&gt;

&lt;p&gt;I like to pair the &lt;a href="https://github.com/guard/guard-shell"&gt;guard-shell&lt;/a&gt; gem with ImageOptim to help me
keep my project's image assets compressed and ready for production. Make sure
you have both guard and guard-shell in your Gemfile and set up a watcher in
your Guardfile for new or edited images:&lt;/p&gt;

&lt;script src="https://gist.github.com/4503714.js"&gt;&lt;/script&gt;


&lt;p&gt;An interesting side effect to note is that guard will catch the file change
when ImageOptim is done compressing and re-open it in ImageOptim and continue
this loop untill there's nothing else ImageOptim can compress out of the
image.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:adamyonk.com,2012-12-17:/posts/2012/12/17/use-long-flags-when-scripting.html</id>
    <title type="html">Use long flags when scripting</title>
    <published>2012-12-17T16:32:59Z</published>
    <updated>2012-12-17T16:32:59Z</updated>
    <link rel="alternate" href="http://adamyonk.com/posts/2012/12/17/use-long-flags-when-scripting.html"/>
    <content type="html">&lt;p&gt;
  I peruse a fair amount of dotfile repos, and keep seeing people use short
  flags for things like aliases and inside little command line tools. Short
  flags are a command line shortcut, and they do belong there, but if you're not
  writing the command in a prompt, do yourself (and anyone else that may someday
  be reading your code) a favor and be more verbose, because this:
&lt;/p&gt;
&lt;code&gt;curl --silent checkip.dyndns.org \
| grep --extended-regexp --only-matching '[0-9\.]+'&lt;/code&gt;
&lt;p&gt;
  is a lot easier for a human to understand than this:
&lt;/p&gt;
&lt;code&gt;curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+'&lt;/code&gt;
</content>
  </entry>
</feed>
